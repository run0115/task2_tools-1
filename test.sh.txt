#!/bin/bash

# test.sh - 编译并运行 C 语言的 Hello程序

# 设置颜色输出
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # 无颜色

# 输出颜色信息
info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 清理函数
cleanup() {
    if [ -f "hello" ]; then
        info "清理编译生成的文件..."
        rm -f hello
    fi
}

# 设置信号处理，确保脚本中断时也能清理
trap cleanup EXIT INT TERM

# 主函数
main() {
    local source_file="hello.c"
    
    # 检查源文件是否存在
    if [ ! -f "$source_file" ]; then
        error "找不到 $source_file 文件"
        echo "请创建一个包含以下内容的 hello.c 文件:"
        echo ""
        echo "#include <stdio.h>"
        echo ""
        echo "int main() {"
        echo "    printf(\"Hello World!\\n\");"
        echo "    return 0;"
        echo "}"
        exit 1
    fi
    
    info "找到 $source_file 文件"
    
    # 编译 C 程序
    info "编译程序..."
    if gcc -o hello "$source_file"; then
        info "编译成功"
    else
        error "编译失败"
        exit 1
    fi
    
    # 运行程序
    info "运行程序..."
    echo "----------------------------------------"
    ./hello
    local exit_code=$?
    echo "----------------------------------------"
    
    if [ $exit_code -eq 0 ]; then
        info "程序执行成功 (退出代码: $exit_code)"
    else
        error "程序执行失败 (退出代码: $exit_code)"
        exit 1
    fi
}

# 显示帮助信息
show_help() {
    echo "用法: $0 [选项]"
    echo "选项:"
    echo "  -h, --help    显示此帮助信息"
    echo "  -c, --clean   只清理编译生成的文件，不编译运行"
}

# 解析命令行参数
case "$1" in
    -h|--help)
        show_help
        exit 0
        ;;
    -c|--clean)
        cleanup
        exit 0
        ;;
    "")
        main
        ;;
    *)
        error "未知选项: $1"
        show_help
        exit 1
        ;;
esac